/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Rennan API
 * The Rennan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'

import type {
  AccountControllerGetAllParams,
  ResponseAccountDTO,
  ResponseAccountListDTO,
  UpdateAccountDTO
} from '../../model'

import { api } from '../../../lib/axios'
import type { ErrorType, BodyType } from '../../../lib/axios'

export const accountControllerGetAll = (params?: AccountControllerGetAllParams, signal?: AbortSignal) => {
  return api<ResponseAccountListDTO>({ url: `/accounts`, method: 'GET', params, signal })
}

export const getAccountControllerGetAllQueryKey = (params?: AccountControllerGetAllParams) => {
  return [`/accounts`, ...(params ? [params] : [])] as const
}

export const getAccountControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof accountControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: AccountControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetAll>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAccountControllerGetAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountControllerGetAll>>> = ({ signal }) =>
    accountControllerGetAll(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type AccountControllerGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof accountControllerGetAll>>>
export type AccountControllerGetAllQueryError = ErrorType<unknown>

export function useAccountControllerGetAll<
  TData = Awaited<ReturnType<typeof accountControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params: undefined | AccountControllerGetAllParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof accountControllerGetAll>>,
          TError,
          Awaited<ReturnType<typeof accountControllerGetAll>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAccountControllerGetAll<
  TData = Awaited<ReturnType<typeof accountControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: AccountControllerGetAllParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetAll>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof accountControllerGetAll>>,
          TError,
          Awaited<ReturnType<typeof accountControllerGetAll>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAccountControllerGetAll<
  TData = Awaited<ReturnType<typeof accountControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: AccountControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useAccountControllerGetAll<
  TData = Awaited<ReturnType<typeof accountControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: AccountControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAccountControllerGetAllQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const accountControllerGetById = (accountId: string, signal?: AbortSignal) => {
  return api<ResponseAccountDTO>({ url: `/accounts/${accountId}`, method: 'GET', signal })
}

export const getAccountControllerGetByIdQueryKey = (accountId: string) => {
  return [`/accounts/${accountId}`] as const
}

export const getAccountControllerGetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof accountControllerGetById>>,
  TError = ErrorType<unknown>
>(
  accountId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetById>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAccountControllerGetByIdQueryKey(accountId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof accountControllerGetById>>> = ({ signal }) =>
    accountControllerGetById(accountId, signal)

  return { queryKey, queryFn, enabled: !!accountId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type AccountControllerGetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof accountControllerGetById>>>
export type AccountControllerGetByIdQueryError = ErrorType<unknown>

export function useAccountControllerGetById<
  TData = Awaited<ReturnType<typeof accountControllerGetById>>,
  TError = ErrorType<unknown>
>(
  accountId: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof accountControllerGetById>>,
          TError,
          Awaited<ReturnType<typeof accountControllerGetById>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAccountControllerGetById<
  TData = Awaited<ReturnType<typeof accountControllerGetById>>,
  TError = ErrorType<unknown>
>(
  accountId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof accountControllerGetById>>,
          TError,
          Awaited<ReturnType<typeof accountControllerGetById>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAccountControllerGetById<
  TData = Awaited<ReturnType<typeof accountControllerGetById>>,
  TError = ErrorType<unknown>
>(
  accountId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetById>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useAccountControllerGetById<
  TData = Awaited<ReturnType<typeof accountControllerGetById>>,
  TError = ErrorType<unknown>
>(
  accountId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof accountControllerGetById>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAccountControllerGetByIdQueryOptions(accountId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const accountControllerUpdate = (accountId: string, updateAccountDTO: BodyType<UpdateAccountDTO>) => {
  return api<ResponseAccountDTO>({
    url: `/accounts/${accountId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateAccountDTO
  })
}

export const getAccountControllerUpdateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountControllerUpdate>>,
    TError,
    { accountId: string; data: BodyType<UpdateAccountDTO> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountControllerUpdate>>,
  TError,
  { accountId: string; data: BodyType<UpdateAccountDTO> },
  TContext
> => {
  const mutationKey = ['accountControllerUpdate']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountControllerUpdate>>,
    { accountId: string; data: BodyType<UpdateAccountDTO> }
  > = (props) => {
    const { accountId, data } = props ?? {}

    return accountControllerUpdate(accountId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AccountControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof accountControllerUpdate>>>
export type AccountControllerUpdateMutationBody = BodyType<UpdateAccountDTO>
export type AccountControllerUpdateMutationError = ErrorType<unknown>

export const useAccountControllerUpdate = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof accountControllerUpdate>>,
      TError,
      { accountId: string; data: BodyType<UpdateAccountDTO> },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof accountControllerUpdate>>,
  TError,
  { accountId: string; data: BodyType<UpdateAccountDTO> },
  TContext
> => {
  const mutationOptions = getAccountControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
