/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Rennan API
 * The Rennan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'

import type {
  BlogPostControllerGetAllParams,
  CreateBlogPostDTO,
  ResponseBlogPostDTO,
  ResponseBlogPostListDTO,
  UpdateBlogPostDTO
} from '../../model'

import { api } from '../../../lib/axios'
import type { ErrorType, BodyType } from '../../../lib/axios'

export const blogPostControllerCreate = (createBlogPostDTO: BodyType<CreateBlogPostDTO>, signal?: AbortSignal) => {
  return api<ResponseBlogPostDTO>({
    url: `/blog-posts`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createBlogPostDTO,
    signal
  })
}

export const getBlogPostControllerCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blogPostControllerCreate>>,
    TError,
    { data: BodyType<CreateBlogPostDTO> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof blogPostControllerCreate>>,
  TError,
  { data: BodyType<CreateBlogPostDTO> },
  TContext
> => {
  const mutationKey = ['blogPostControllerCreate']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof blogPostControllerCreate>>,
    { data: BodyType<CreateBlogPostDTO> }
  > = (props) => {
    const { data } = props ?? {}

    return blogPostControllerCreate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type BlogPostControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof blogPostControllerCreate>>>
export type BlogPostControllerCreateMutationBody = BodyType<CreateBlogPostDTO>
export type BlogPostControllerCreateMutationError = ErrorType<unknown>

export const useBlogPostControllerCreate = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof blogPostControllerCreate>>,
      TError,
      { data: BodyType<CreateBlogPostDTO> },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof blogPostControllerCreate>>,
  TError,
  { data: BodyType<CreateBlogPostDTO> },
  TContext
> => {
  const mutationOptions = getBlogPostControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const blogPostControllerGetAll = (params?: BlogPostControllerGetAllParams, signal?: AbortSignal) => {
  return api<ResponseBlogPostListDTO>({ url: `/blog-posts`, method: 'GET', params, signal })
}

export const getBlogPostControllerGetAllQueryKey = (params?: BlogPostControllerGetAllParams) => {
  return [`/blog-posts`, ...(params ? [params] : [])] as const
}

export const getBlogPostControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof blogPostControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: BlogPostControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetAll>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBlogPostControllerGetAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof blogPostControllerGetAll>>> = ({ signal }) =>
    blogPostControllerGetAll(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof blogPostControllerGetAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type BlogPostControllerGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof blogPostControllerGetAll>>>
export type BlogPostControllerGetAllQueryError = ErrorType<unknown>

export function useBlogPostControllerGetAll<
  TData = Awaited<ReturnType<typeof blogPostControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params: undefined | BlogPostControllerGetAllParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof blogPostControllerGetAll>>,
          TError,
          Awaited<ReturnType<typeof blogPostControllerGetAll>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useBlogPostControllerGetAll<
  TData = Awaited<ReturnType<typeof blogPostControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: BlogPostControllerGetAllParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetAll>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof blogPostControllerGetAll>>,
          TError,
          Awaited<ReturnType<typeof blogPostControllerGetAll>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useBlogPostControllerGetAll<
  TData = Awaited<ReturnType<typeof blogPostControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: BlogPostControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useBlogPostControllerGetAll<
  TData = Awaited<ReturnType<typeof blogPostControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: BlogPostControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getBlogPostControllerGetAllQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const blogPostControllerGetById = (blogPostId: number, signal?: AbortSignal) => {
  return api<ResponseBlogPostDTO>({ url: `/blog-posts/${blogPostId}`, method: 'GET', signal })
}

export const getBlogPostControllerGetByIdQueryKey = (blogPostId: number) => {
  return [`/blog-posts/${blogPostId}`] as const
}

export const getBlogPostControllerGetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof blogPostControllerGetById>>,
  TError = ErrorType<unknown>
>(
  blogPostId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetById>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBlogPostControllerGetByIdQueryKey(blogPostId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof blogPostControllerGetById>>> = ({ signal }) =>
    blogPostControllerGetById(blogPostId, signal)

  return { queryKey, queryFn, enabled: !!blogPostId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof blogPostControllerGetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type BlogPostControllerGetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof blogPostControllerGetById>>>
export type BlogPostControllerGetByIdQueryError = ErrorType<unknown>

export function useBlogPostControllerGetById<
  TData = Awaited<ReturnType<typeof blogPostControllerGetById>>,
  TError = ErrorType<unknown>
>(
  blogPostId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof blogPostControllerGetById>>,
          TError,
          Awaited<ReturnType<typeof blogPostControllerGetById>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useBlogPostControllerGetById<
  TData = Awaited<ReturnType<typeof blogPostControllerGetById>>,
  TError = ErrorType<unknown>
>(
  blogPostId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof blogPostControllerGetById>>,
          TError,
          Awaited<ReturnType<typeof blogPostControllerGetById>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useBlogPostControllerGetById<
  TData = Awaited<ReturnType<typeof blogPostControllerGetById>>,
  TError = ErrorType<unknown>
>(
  blogPostId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetById>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useBlogPostControllerGetById<
  TData = Awaited<ReturnType<typeof blogPostControllerGetById>>,
  TError = ErrorType<unknown>
>(
  blogPostId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof blogPostControllerGetById>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getBlogPostControllerGetByIdQueryOptions(blogPostId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const blogPostControllerUpdate = (blogPostId: number, updateBlogPostDTO: BodyType<UpdateBlogPostDTO>) => {
  return api<ResponseBlogPostDTO>({
    url: `/blog-posts/${blogPostId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateBlogPostDTO
  })
}

export const getBlogPostControllerUpdateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blogPostControllerUpdate>>,
    TError,
    { blogPostId: number; data: BodyType<UpdateBlogPostDTO> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof blogPostControllerUpdate>>,
  TError,
  { blogPostId: number; data: BodyType<UpdateBlogPostDTO> },
  TContext
> => {
  const mutationKey = ['blogPostControllerUpdate']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof blogPostControllerUpdate>>,
    { blogPostId: number; data: BodyType<UpdateBlogPostDTO> }
  > = (props) => {
    const { blogPostId, data } = props ?? {}

    return blogPostControllerUpdate(blogPostId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type BlogPostControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof blogPostControllerUpdate>>>
export type BlogPostControllerUpdateMutationBody = BodyType<UpdateBlogPostDTO>
export type BlogPostControllerUpdateMutationError = ErrorType<unknown>

export const useBlogPostControllerUpdate = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof blogPostControllerUpdate>>,
      TError,
      { blogPostId: number; data: BodyType<UpdateBlogPostDTO> },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof blogPostControllerUpdate>>,
  TError,
  { blogPostId: number; data: BodyType<UpdateBlogPostDTO> },
  TContext
> => {
  const mutationOptions = getBlogPostControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const blogPostControllerDelete = (blogPostId: number) => {
  return api<void>({ url: `/blog-posts/${blogPostId}`, method: 'DELETE' })
}

export const getBlogPostControllerDeleteMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blogPostControllerDelete>>,
    TError,
    { blogPostId: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof blogPostControllerDelete>>,
  TError,
  { blogPostId: number },
  TContext
> => {
  const mutationKey = ['blogPostControllerDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof blogPostControllerDelete>>, { blogPostId: number }> = (
    props
  ) => {
    const { blogPostId } = props ?? {}

    return blogPostControllerDelete(blogPostId)
  }

  return { mutationFn, ...mutationOptions }
}

export type BlogPostControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof blogPostControllerDelete>>>

export type BlogPostControllerDeleteMutationError = ErrorType<unknown>

export const useBlogPostControllerDelete = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof blogPostControllerDelete>>,
      TError,
      { blogPostId: number },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof blogPostControllerDelete>>,
  TError,
  { blogPostId: number },
  TContext
> => {
  const mutationOptions = getBlogPostControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
