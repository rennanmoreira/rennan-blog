/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Rennan API
 * The Rennan API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'

import { api } from '../../../lib/axios'
import type { ErrorType } from '../../../lib/axios'

export const appControllerGetHealthcheck = (signal?: AbortSignal) => {
  return api<void>({ url: `/healthcheck`, method: 'GET', signal })
}

export const getAppControllerGetHealthcheckQueryKey = () => {
  return [`/healthcheck`] as const
}

export const getAppControllerGetHealthcheckQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheck>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHealthcheckQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHealthcheck>>> = ({ signal }) =>
    appControllerGetHealthcheck(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type AppControllerGetHealthcheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHealthcheck>>
>
export type AppControllerGetHealthcheckQueryError = ErrorType<unknown>

export function useAppControllerGetHealthcheck<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheck>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHealthcheck>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAppControllerGetHealthcheck<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheck>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHealthcheck>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAppControllerGetHealthcheck<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheck>>, TError, TData>>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useAppControllerGetHealthcheck<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheck>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheck>>, TError, TData>>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAppControllerGetHealthcheckQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const appControllerGetHealthcheckDatabase = (signal?: AbortSignal) => {
  return api<void>({ url: `/healthcheck-database`, method: 'GET', signal })
}

export const getAppControllerGetHealthcheckDatabaseQueryKey = () => {
  return [`/healthcheck-database`] as const
}

export const getAppControllerGetHealthcheckDatabaseQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHealthcheckDatabaseQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>> = ({ signal }) =>
    appControllerGetHealthcheckDatabase(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type AppControllerGetHealthcheckDatabaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>
>
export type AppControllerGetHealthcheckDatabaseQueryError = ErrorType<unknown>

export function useAppControllerGetHealthcheckDatabase<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAppControllerGetHealthcheckDatabase<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAppControllerGetHealthcheckDatabase<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>, TError, TData>>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useAppControllerGetHealthcheckDatabase<
  TData = Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealthcheckDatabase>>, TError, TData>>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAppControllerGetHealthcheckDatabaseQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
