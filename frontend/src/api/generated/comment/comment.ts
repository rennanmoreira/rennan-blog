/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Rennan API
 * The Rennan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'

import type {
  CommentControllerGetAllParams,
  CreateCommentDTO,
  ResponseCommentDTO,
  ResponseCommentListDTO,
  UpdateCommentDTO
} from '../../model'

import { api } from '../../../lib/axios'
import type { ErrorType, BodyType } from '../../../lib/axios'

export const commentControllerCreate = (createCommentDTO: BodyType<CreateCommentDTO>, signal?: AbortSignal) => {
  return api<ResponseCommentDTO>({
    url: `/comments`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCommentDTO,
    signal
  })
}

export const getCommentControllerCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentControllerCreate>>,
    TError,
    { data: BodyType<CreateCommentDTO> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof commentControllerCreate>>,
  TError,
  { data: BodyType<CreateCommentDTO> },
  TContext
> => {
  const mutationKey = ['commentControllerCreate']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentControllerCreate>>,
    { data: BodyType<CreateCommentDTO> }
  > = (props) => {
    const { data } = props ?? {}

    return commentControllerCreate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CommentControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof commentControllerCreate>>>
export type CommentControllerCreateMutationBody = BodyType<CreateCommentDTO>
export type CommentControllerCreateMutationError = ErrorType<unknown>

export const useCommentControllerCreate = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof commentControllerCreate>>,
      TError,
      { data: BodyType<CreateCommentDTO> },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof commentControllerCreate>>,
  TError,
  { data: BodyType<CreateCommentDTO> },
  TContext
> => {
  const mutationOptions = getCommentControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const commentControllerGetAll = (params?: CommentControllerGetAllParams, signal?: AbortSignal) => {
  return api<ResponseCommentListDTO>({ url: `/comments`, method: 'GET', params, signal })
}

export const getCommentControllerGetAllQueryKey = (params?: CommentControllerGetAllParams) => {
  return [`/comments`, ...(params ? [params] : [])] as const
}

export const getCommentControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof commentControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: CommentControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetAll>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCommentControllerGetAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commentControllerGetAll>>> = ({ signal }) =>
    commentControllerGetAll(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof commentControllerGetAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type CommentControllerGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof commentControllerGetAll>>>
export type CommentControllerGetAllQueryError = ErrorType<unknown>

export function useCommentControllerGetAll<
  TData = Awaited<ReturnType<typeof commentControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params: undefined | CommentControllerGetAllParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentControllerGetAll>>,
          TError,
          Awaited<ReturnType<typeof commentControllerGetAll>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCommentControllerGetAll<
  TData = Awaited<ReturnType<typeof commentControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: CommentControllerGetAllParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetAll>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentControllerGetAll>>,
          TError,
          Awaited<ReturnType<typeof commentControllerGetAll>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCommentControllerGetAll<
  TData = Awaited<ReturnType<typeof commentControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: CommentControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useCommentControllerGetAll<
  TData = Awaited<ReturnType<typeof commentControllerGetAll>>,
  TError = ErrorType<unknown>
>(
  params?: CommentControllerGetAllParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getCommentControllerGetAllQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const commentControllerGetById = (commentId: number, signal?: AbortSignal) => {
  return api<ResponseCommentDTO>({ url: `/comments/${commentId}`, method: 'GET', signal })
}

export const getCommentControllerGetByIdQueryKey = (commentId: number) => {
  return [`/comments/${commentId}`] as const
}

export const getCommentControllerGetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof commentControllerGetById>>,
  TError = ErrorType<unknown>
>(
  commentId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetById>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCommentControllerGetByIdQueryKey(commentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commentControllerGetById>>> = ({ signal }) =>
    commentControllerGetById(commentId, signal)

  return { queryKey, queryFn, enabled: !!commentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof commentControllerGetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type CommentControllerGetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof commentControllerGetById>>>
export type CommentControllerGetByIdQueryError = ErrorType<unknown>

export function useCommentControllerGetById<
  TData = Awaited<ReturnType<typeof commentControllerGetById>>,
  TError = ErrorType<unknown>
>(
  commentId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentControllerGetById>>,
          TError,
          Awaited<ReturnType<typeof commentControllerGetById>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCommentControllerGetById<
  TData = Awaited<ReturnType<typeof commentControllerGetById>>,
  TError = ErrorType<unknown>
>(
  commentId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentControllerGetById>>,
          TError,
          Awaited<ReturnType<typeof commentControllerGetById>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCommentControllerGetById<
  TData = Awaited<ReturnType<typeof commentControllerGetById>>,
  TError = ErrorType<unknown>
>(
  commentId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetById>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useCommentControllerGetById<
  TData = Awaited<ReturnType<typeof commentControllerGetById>>,
  TError = ErrorType<unknown>
>(
  commentId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof commentControllerGetById>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getCommentControllerGetByIdQueryOptions(commentId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const commentControllerUpdate = (commentId: number, updateCommentDTO: BodyType<UpdateCommentDTO>) => {
  return api<ResponseCommentDTO>({
    url: `/comments/${commentId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateCommentDTO
  })
}

export const getCommentControllerUpdateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentControllerUpdate>>,
    TError,
    { commentId: number; data: BodyType<UpdateCommentDTO> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof commentControllerUpdate>>,
  TError,
  { commentId: number; data: BodyType<UpdateCommentDTO> },
  TContext
> => {
  const mutationKey = ['commentControllerUpdate']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commentControllerUpdate>>,
    { commentId: number; data: BodyType<UpdateCommentDTO> }
  > = (props) => {
    const { commentId, data } = props ?? {}

    return commentControllerUpdate(commentId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CommentControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof commentControllerUpdate>>>
export type CommentControllerUpdateMutationBody = BodyType<UpdateCommentDTO>
export type CommentControllerUpdateMutationError = ErrorType<unknown>

export const useCommentControllerUpdate = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof commentControllerUpdate>>,
      TError,
      { commentId: number; data: BodyType<UpdateCommentDTO> },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof commentControllerUpdate>>,
  TError,
  { commentId: number; data: BodyType<UpdateCommentDTO> },
  TContext
> => {
  const mutationOptions = getCommentControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const commentControllerDelete = (commentId: number) => {
  return api<void>({ url: `/comments/${commentId}`, method: 'DELETE' })
}

export const getCommentControllerDeleteMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commentControllerDelete>>,
    TError,
    { commentId: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof commentControllerDelete>>,
  TError,
  { commentId: number },
  TContext
> => {
  const mutationKey = ['commentControllerDelete']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof commentControllerDelete>>, { commentId: number }> = (
    props
  ) => {
    const { commentId } = props ?? {}

    return commentControllerDelete(commentId)
  }

  return { mutationFn, ...mutationOptions }
}

export type CommentControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof commentControllerDelete>>>

export type CommentControllerDeleteMutationError = ErrorType<unknown>

export const useCommentControllerDelete = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof commentControllerDelete>>,
      TError,
      { commentId: number },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof commentControllerDelete>>, TError, { commentId: number }, TContext> => {
  const mutationOptions = getCommentControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
